plugins {
    id 'idea'
    id 'java-library'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.80'
}

version = mc_version + "-" + mod_version
group = mod_group_id

base {
    archivesName = mod_name
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)
println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')

runs {
    configureEach {
        // "SCAN": For mods scan.
        // "REGISTRIES": For firing of registry events.
        // "REGISTRYDUMP": For getting the contents of all registries.
        systemProperty 'forge.logging.markers', 'REGISTRIES'
        systemProperty 'forge.logging.console.level', 'debug'
        modSource project.sourceSets.main
    }

    client {
        if (project.hasProperty('mc_uuid')) {
            programArguments.add '--uuid', project.getProperty('mc_uuid')
        }
        if (project.hasProperty('mc_username')) {
            programArguments.add '--username', project.getProperty('mc_username')
        }
        if (project.hasProperty('mc_accessToken')) {
            programArguments.add '--accessToken', project.getProperty('mc_accessToken')
        }
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id

    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }

    gameTestServer {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    data {
        workingDirectory project.file('run/data')
        programArguments.addAll '--mod', mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }


repositories {
    mavenLocal()
    maven { url = "https://maven.covers1624.net/" }
    maven { url = 'https://maven.blamejared.com' }
    maven { url = 'https://maven.theillusivec4.top/' }
    maven { url = 'https://maven.melanx.de/' }
    maven { url = "https://maven.architectury.dev" }
    maven { url = "https://maven.saps.dev/minecraft" }
    maven {
        name = 'Twilight Forest'
        url = 'https://modmaven.dev/'
    }
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

dependencies {
    implementation "net.neoforged:neoforge:${neo_version}"

    compileOnly ("mezz.jei:jei-${mc_version}-common-api:${jei_version}")
    compileOnly ("mezz.jei:jei-${mc_version}-neoforge-api:${jei_version}")
    runtimeOnly ("mezz.jei:jei-${mc_version}-neoforge:${jei_version}")

    compileOnly ("com.blamejared.crafttweaker:CraftTweaker-neoforge-${mc_version}:${crafttweaker_version}")
    compileOnly files("libs/Jade-1.20.4-neoforge-13.2.2-api.jar")

    compileOnly ("top.theillusivec4.curios:curios-neoforge:${curios_version}:api")
    runtimeOnly ("top.theillusivec4.curios:curios-neoforge:${curios_version}")

    compileOnly ("dev.latvian.mods:kubejs-neoforge:${kubejs_version}")
    compileOnly ("dev.latvian.mods:rhino-neoforge:${rhino_version}")
    compileOnly ("dev.architectury:architectury-neoforge:${architectury_version}")
}

def resourceTargets = ['META-INF/mods.toml', 'pack.mcmeta']
def replaceProperties = [
        minecraft_version: mc_version, mc_range: mc_range,
        neo_version      : neo_version, neo_range: neo_range,
        loader_range     : loader_range,
        mod_id           : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
        issue_tracker    : issue_tracker,
        mod_authors      : mod_authors, mod_description: mod_description

]

tasks.withType(ProcessResources).configureEach {
    inputs.properties replaceProperties

    filesMatching(resourceTargets) {
        expand replaceProperties + [project: project]
    }
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar
        }
    }
    repositories {
        if (System.getenv('MAVEN_USERNAME') != null && System.getenv('MAVEN_PASSWORD') != null) {
            maven {
                name 'release'
                url = 'https://maven.nova-committee.cn/releases'

                credentials {
                    username System.getenv('MAVEN_USERNAME')
                    password System.getenv('MAVEN_PASSWORD')
                }
            }
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
    options.release.set(17)
    options.compilerArgs.add("-Xlint:-removal")
}

